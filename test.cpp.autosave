#include <iostream>
#include<fstream>
#include <vector>
#include <cmath>
#include <cstdlib>

using namespace std;
ofstream plotterFile;

class Point
{

public:
    int x,y,z, oid;
    static int pNumber;     //number of point objects

    Point()
    {
        x = 0;
        y = 0;
        z = 0;
        oid = pNumber++;
    }

    Point(int a, int b, int c)
    {
        x = a;
        y = b;
        z = c;
        oid = pNumber++;
    }

    Point (const Point& p)
    {
        this->x = p.x;
        this->y = p.y;
        this->z = p.z;
        oid = pNumber++;
    }

    Point operator + (const Point& p){
        int tp_x = this->x + p.x;
        int tp_y = this->y + p.y;
        int tp_z = this->z + p.z;

        return Point(tp_x, tp_y, tp_z);
    }

    Point operator - (const Point& p){
        int tp_x = this->x - p.x;
        int tp_y = this->y - p.y;
        int tp_z = this->z - p.z;

        return Point(tp_x, tp_y, tp_z);
    }

    void operator ++()
    {
        *this = *this + Point(1,1,1);
    }

    void operator ++(int)
    {
        *this = *this + Point(1,1,1);
    }

    void operator --()
    {
        *this = *this - Point(1,1,1);
    }

    void operator --(int)
    {
        *this = *this - Point(1,1,1);
    }

    friend ostream &operator<<(ostream &out, Point p)     //output
    {
        p.plotPoint();
        out<<"X = "<<p.x<<" Y = "<<p.y <<" Z = "<<p.z;
        return out;
    }

    friend istream &operator>>(istream &in, Point &p)     //input
    {
            cout<<"Enter X: ";
            in>>p.x;
            cout<<"Enter Y: ";
            in>>p.y;
            cout<<"Enter Z: ";
            in>>p.z;
            return in;
    }

    void swap(int n)
    {
        int temp;
        switch(n)
        {
        case 1:
            temp = x;
            x = z;
            z = temp;
            break;
        case 2:
            temp = x;
            x = y;
            y = temp;
            break;
        case 3:
            temp = z;
            z = x;
            x = temp;
            temp = x;
            x = y;
            y = temp;
            break;
        case 4:
            temp = y;
            y = z;
            z = temp;
            break;
        case 5:
            temp = z;
            z = x;
            x = temp;
            temp = y;
            y = z;
            z = temp;
            break;
        case 6:
            //Nothing to be done
            break;
        }
    }

    bool insideCircle(Point& c, int rad)
    {
        if(eucledian(c) < rad)
        {
            return true;
        }
        return false;
    }

    float eucledian(Point dest)
    {
        return sqrt((x-dest.x)*(x-dest.x) + (y-dest.y)*(y-dest.y));
    }

    void plotPoint()
    {
        plotterFile << "new Point(" <<x<< "," <<y << ").plot(document.getElementById('vis').getContext('2d'));\n";
    }
};

class SimplePathInterpolator
{
    int scaleFactor;
    int interpolationFactor;
    int SLOPE_THRESHOLD;

public:
    vector<Point> pVect;

    SimplePathInterpolator(int sFac, int iFac, int deg){
        scaleFactor = sFac;
        interpolationFactor = iFac;
        SLOPE_THRESHOLD = tan(deg * M_PI / 180);
    }

    void add(Point &p)
    {
        pVect.push_back(p);
    }

    //    Dec   a>b b>c c>a
    //     0    0	0	0	c>b>a	Not possible
    //     1    0	0	1	c>b>a
    //     2    0	1	0	b>a>c
    //     3    0	1	1	b>c>a
    //     4    1	0	0	a>c>b
    //     5    1	0	1	c>a>b
    //     6    1	1	0	a>b>c
    //     7    1	1	1	a>b		Not possible

    void interpolate_internal(int a, int b, int c, Point dest, Point src)
    {
        int slope_x = a/interpolationFactor;
        int slope_y = b/interpolationFactor;
        int slope_z = c/interpolationFactor;

        /*
        if(slope_x > SLOPE_THRESHOLD)
        {
            cout<<"x shoot";
        }
        if(slope_y > SLOPE_THRESHOLD)
        {
            cout<<"y shoot";
        }
        if(slope_z > SLOPE_THRESHOLD)
        {
            cout<<"z shoot";
        }
        */
        cout<<"Inside Interpolate Internal";
        cout<<src<<dest<<endl;

        cout<<"Interpolating";
        if(dest.x > src.x){

            int y_factor;
            int z_factor;

            if(dest.y > src.y)
                y_factor = interpolationFactor*(dest.y - src.y)/(dest.x - src.x);
            else
                y_factor = -interpolationFactor*(src.y - dest.y)/(dest.x - src.x);

            if(dest.z > src.z)
                z_factor = interpolationFactor*(dest.z - src.z)/(dest.x - src.x);
            else
                z_factor = -interpolationFactor*(src.z - dest.z)/(dest.x - src.x);

            cout<<endl<<"\n\ny_factor"<<y_factor<<"\nz_factor= "<<z_factor<<endl;

            for(int i=src.x, j=src.y, k=src.z; i<=dest.x; i+=interpolationFactor, j+=y_factor, k+=z_factor )
            {
                //pVect.push_back(Point(i));
                cout<<i<<" "<<j<<" "<<k<<" "<<endl;
            }
        }
        else
        {
            for(int i=dest.x; i>=src.x; i-=interpolationFactor )
            {
                //pVect.push_back(Point(i));
                cout<<i<<""<<""<<endl;
            }
        }
        cout<<"Finished Interpolating";
    }

    vector<Point> interpolate(Point& dest, Point& src)
    {
        int i = 0;
        /*
        //first check which set of co-ords have max diff
        int a = dest.x - src.x;
        int b = dest.y - src.y;
        int c = dest.z - src.z;

        cout<<Point(a,b,c)<<endl;

        bool a_vs_b = (abs(a)>abs(b))?true:false;
        bool b_vs_c = (abs(b)>abs(c))?true:false;s
        bool c_vs_a = (abs(c)>abs(a))?true:false;


        int grt = (int)a_vs_b<<2 | b_vs_c<<1 | c_vs_a;
        cout<<grt<<endl;

        //cout<<ag<<" "<<bg<<" "<<cg<<" "<<endl;

        switch(grt)
        {for(int i=src.x; i<=dest.x; i+=interpolationFactor )
        {
            //pVect.push_back(Point(i));
            cout<<i;
        }
        case 1:
            cout<<"c>b>a";
            src.swap(1);
            dest.swap(1);
            interpolate_internal(c,b,a,dest,src);
            break;
        case 2:
            cout<<"b>a>c";
            src.swap(2);
            dest.swap(2);
            interpolate_internal(b,a,c,dest,src);
            break;
        case 3:
            cout<<"b>c>a";
            src.swap(3);
            dest.swap(3);
            interpolate_internal(b,c,a,dest,src);
            break;
        case 4:
            cout<<"a>c>b";
            src.swap(4);
            dest.swap(4);
            interpolate_internal(a,c,b,dest,src);
            break;
        case 5:
            cout<<"c>a>b";
            src.swap(5);
            dest.swap(5);
            interpolate_internal(c,a,b,dest,src);
            break;
        case 6:
            cout<<"a>b>c";
            src.swap(6);
            dest.swap(6);
            interpolate_internal(a,b,c,dest,src);
            break;
        }
        cout<<endl;

        //Swap the interpolated points
        */
        //cout<<src;
        pVect.push_back(src);
        cout<<"\nIntermediate pts\n";
        //First go for depth
        if(src.z < dest.z)
        {
            for(i=src.z; i<dest.z; i+=interpolationFactor )
            {
                cout<<src.x<<" "<<src.y<<" "<<i<<endl;
                pVect.push_back(Point (src.x, src.y,i));
                //cout<<"\n\nI = "<<i;
            }
            //cout<<"\n\nYo I = "<<i;
        }
        else
        {
            for(i=src.z; i>dest.z; i-=interpolationFactor )
            {
                cout<<src.x<<" "<<src.y<<" "<<i<<endl;
                pVect.push_back(Point (src.x, src.y,i));
            }
        }

        src.z = dest.z;
        if(i-interpolationFactor != src.z)
            pVect.push_back(src);
        cout<<"Done with depth\n";

        //Now go for x and then y
        if(src.x < dest.x)
        {
            for(i=src.x; i<dest.x; i+=interpolationFactor )
            {
                cout<<i<<" "<<src.y<<" "<<src.z<<endl;
                pVect.push_back(Point (i, src.y,src.z));
            }
        }
        else
        {
            for(i=src.x; i>dest.x; i-=interpolationFactor )
            {
                cout<<i<<" "<<src.y<<" "<<src.z<<endl;
                pVect.push_back(Point (i, src.y,src.z));
            }
        }

        cout<<"Done with x\n";
        src.x = dest.x;
        if(i-interpolationFactor != dest.x)
            pVect.push_back(src);

        //Finish with y
        if(src.y < dest.y)
        {
            for(i=src.y; i<dest.y; i+=interpolationFactor )
            {
                cout<<src.x<<" "<<i<<" "<<src.z<<endl;
                pVect.push_back(Point (src.x, i, src.z));
            }

            if(i-interpolationFactor != dest.y)
                pVect.push_back(src);
        }
        else
        {
            for(i=src.y; i>dest.y; i-=interpolationFactor )
            {
                cout<<src.x<<" "<<i<<" "<<src.z<<endl;
                pVect.push_back(Point (src.x, i, src.z));
            }

            if(i+interpolationFactor != dest.y)
                pVect.push_back(src);
        }
        src.y = dest.y;

        return pVect;

    }

    vector<Point> interpolateCircle( Point& dest, Point& src, Point centreObstacle, int rad)
    {
        //check if the line segment joining the src n
        //dest passes through the circle of the obstacle
        //in the 2D plane(X,Y)
        float currentYaw = 0;
        Point tempDest;

        //1.first determine if pt. lies inside the circle
        if(src.insideCircle(centreObstacle,rad))
        //2.if yes,bring vehicle back from task without changing yaw
        {
            //Get intermediate dest & get path upto that point

            //2.a Get yaw in opp dirn
            //<need to get currentyaw> assume 90 for testing
            currentYaw = (90+180)*M_PI/180;

            //2.b parametric eqn of circle
            int x = centreObstacle.x + rad * cos(currentYaw);
            int y = centreObstacle.y + rad * cos(currentYaw);

            //2.c goto that point
            tempDest = Point(x,y,src.z);
            interpolate(tempDest, src);


        }
        //3.change yaw
        float newYaw = atan((dest.y-tempDest.y)/(dest.x-tempDest.x));
        //<need to use nilesh's function to change yaw>
        //changeYaw( newYaw )

        //4.sway out of obstacle circle
        //Now vehicle should be aligned
        //sway(rad+10);


        //5.surge along parallel line
        //surge(2*rad+20)

        //6.reach from current pt. to end pt(can be obtimised to control max yaw)
        tempDest = Point(src.x+2*rad+20,src.y+rad+10,src.z);
        interpolate(dest,tempDest);

        return pVect;

    }

};

int Point::pNumber = 0;


int main()
{
    //Open file for plotting
    plotterFile.open ("./js/temp/plot.js");
    plotterFile<<"circle(20,20,20);";

    Point p(10, 20, 20);
    Point q(50, 120, 99);

    cout<<q.oid<<"\n\n\n\n";

    vector<Point> pVect;
    vector<Point>::const_iterator i;

    //std::cin>>p;

    /*
    ///////////////Testing//////////////
    //Test Case 1: Vector Usage
    cout<<p<<endl<<q<<endl;
    Point r = p + q;

    cout<<r<<endl;



    pVect.push_back(p);
    pVect.push_back(r);
    pVect.push_back(q);

    for(i=pVect.begin(); i!=pVect.end(); ++i)
    {
        cout << *i << endl;
    }


    //Test Case 2: get simple interpolated path
    SimplePathInterpolator spi(10,2,45);
    pVect = spi.interpolate(q,p);
    for(i=pVect.begin(); i!=pVect.end(); ++i)
    {
        cout << *i << endl;
    }
    ////////////Testing ends////////////
    */

    //Test Case 3: Circular path interpolator(obstacle avoider)
    SimplePathInterpolator spi(10,2,45);
    pVect = spi.interpolateCircle(q,p, Point(20,20,0),20);
    for(i=pVect.begin(); i!=pVect.end(); ++i)
    {
        cout << *i << endl;
    }

    //Close file
    plotterFile.close();
    return 0;
}
